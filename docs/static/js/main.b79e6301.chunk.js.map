{"version":3,"sources":["components/Pokemon.js","components/PokeList.js","data/pokemonData.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","_this$props","this","props","url","name","types","react_default","a","createElement","src","alt","map","type","i","key","Component","PokeList","pokemon","className","item","id","components_Pokemon","evolution","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","components_PokeList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OA0BeA,mLAtBJ,IAAAC,EACsBC,KAAKC,MAA1BC,EADDH,EACCG,IAAKC,EADNJ,EACMI,KAAMC,EADZL,EACYK,MACnB,OACEC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKC,IAAKN,EAAKO,IAAI,KACnBJ,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,UACGH,EAAMM,IAAI,SAACC,EAAMC,GAChB,OAAOP,EAAAC,EAAAC,cAAA,MAAIM,IAAKD,GAAID,cATVG,aCiCPC,0LA9BJ,IACCC,EAAYhB,KAAKC,MAAjBe,QACR,OACEX,EAAAC,EAAAC,cAAA,MAAIU,UAAU,kBACXD,EAAQN,IAAI,SAAAQ,GAAQ,IACXC,EAAyBD,EAAzBC,GAAIjB,EAAqBgB,EAArBhB,IAAKC,EAAgBe,EAAhBf,KAAMC,EAAUc,EAAVd,MACvB,OACEC,EAAAC,EAAAC,cAACa,EAAD,CACEP,IAAKM,EACLjB,IAAKA,EACLC,KAAMA,EACNC,MAAOA,cAZEU,cC8ERE,EAnFC,CACd,CACEG,GAAI,EACJhB,KAAM,YACNC,MAAO,CAAC,SAAU,SAClBiB,UAAW,KACXnB,IACE,kFAEJ,CACEiB,GAAI,EACJhB,KAAM,UACNC,MAAO,CAAC,SAAU,SAClBiB,UAAW,YACXnB,IACE,kFAEJ,CACEiB,GAAI,EACJhB,KAAM,WACNC,MAAO,CAAC,SAAU,SAClBiB,UAAW,UACXnB,IACE,kFAEJ,CACEiB,GAAI,EACJhB,KAAM,aACNC,MAAO,CAAC,QACRiB,UAAW,KACXnB,IACE,kFAEJ,CACEiB,GAAI,EACJhB,KAAM,aACNC,MAAO,CAAC,QACRiB,UAAW,aACXnB,IACE,kFAEJ,CACEiB,GAAI,EACJhB,KAAM,YACNC,MAAO,CAAC,SAAU,QAClBiB,UAAW,aACXnB,IACE,kFAEJ,CACEiB,GAAI,EACJhB,KAAM,WACNC,MAAO,CAAC,SACRiB,UAAW,KACXnB,IACE,kFAEJ,CACEiB,GAAI,EACJhB,KAAM,YACNC,MAAO,CAAC,SACRiB,UAAW,WACXnB,IACE,kFAEJ,CACEiB,GAAI,EACJhB,KAAM,YACNC,MAAO,CAAC,SACRiB,UAAW,YACXnB,IACE,kFAEJ,CACEiB,GAAI,GACJhB,KAAM,WACNC,MAAO,CAAC,OACRiB,UAAW,KACXnB,IACE,oFCzDSoB,qBAhBb,SAAAA,EAAYrB,GAAO,IAAAsB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAxB,KAAAsB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAxB,KAAAwB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA5B,KAAMC,KACDe,QAAUA,EAFEO,wEAKV,IACCP,EAAYhB,KAAZgB,QACR,OACEX,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OACbZ,EAAAC,EAAAC,cAAA,MAAIU,UAAU,cAAd,uBACAZ,EAAAC,EAAAC,cAACsB,EAAD,CAAUb,QAASA,YAXTF,cCOEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b79e6301.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Pokemon extends Component {\n  render() {\n    const { url, name, types } = this.props;\n    return (\n      <li>\n        <img src={url} alt=\"\" />\n        <h2>{name}</h2>\n        <ul>\n          {types.map((type, i) => {\n            return <li key={i}>{type}</li>;\n          })}\n        </ul>\n      </li>\n    );\n  }\n}\n\nPokemon.propTypes = {\n  url: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  types: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired\n};\n\nexport default Pokemon;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Pokemon from \"./Pokemon\";\nimport '../pokeList.css'\n\nclass PokeList extends Component {\n  render() {\n    const { pokemon } = this.props;\n    return (\n      <ul className=\"app__card-list\">\n        {pokemon.map(item => {\n          const { id, url, name, types } = item;\n          return (\n            <Pokemon\n              key={id}\n              url={url}\n              name={name}\n              types={types}\n            />\n          );\n        })}\n      </ul>\n    );\n  }\n}\n\nPokeList.propTypes = {\n  pokemon: PropTypes.arrayOf(\n    PropTypes.shape({\n      url: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      types: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired\n    })\n  ).isRequired\n};\n\nexport default PokeList;\n","const pokemon = [\n  {\n    id: 1,\n    name: \"bulbasaur\",\n    types: [\"poison\", \"grass\"],\n    evolution: null,\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png\"\n  },\n  {\n    id: 2,\n    name: \"ivysaur\",\n    types: [\"poison\", \"grass\"],\n    evolution: \"bulbasaur\",\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/2.png\"\n  },\n  {\n    id: 3,\n    name: \"venusaur\",\n    types: [\"poison\", \"grass\"],\n    evolution: \"ivysaur\",\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/3.png\"\n  },\n  {\n    id: 4,\n    name: \"charmander\",\n    types: [\"fire\"],\n    evolution: null,\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/4.png\"\n  },\n  {\n    id: 5,\n    name: \"charmeleon\",\n    types: [\"fire\"],\n    evolution: \"charmander\",\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/5.png\"\n  },\n  {\n    id: 6,\n    name: \"charizard\",\n    types: [\"flying\", \"fire\"],\n    evolution: \"charmeleon\",\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/6.png\"\n  },\n  {\n    id: 7,\n    name: \"squirtle\",\n    types: [\"water\"],\n    evolution: null,\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/7.png\"\n  },\n  {\n    id: 8,\n    name: \"wartortle\",\n    types: [\"water\"],\n    evolution: \"squirtle\",\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/8.png\"\n  },\n  {\n    id: 9,\n    name: \"blastoise\",\n    types: [\"water\"],\n    evolution: \"wartortle\",\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/9.png\"\n  },\n  {\n    id: 10,\n    name: \"caterpie\",\n    types: [\"bug\"],\n    evolution: null,\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/10.png\"\n  }\n];\n\nexport default pokemon;\n","import React, { Component } from \"react\";\nimport PokeList from \"./components/PokeList\";\nimport pokemon from \"./data/pokemonData\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.pokemon = pokemon;\n  }\n\n  render() {\n    const { pokemon } = this;\n    return (\n      <div className=\"App\">\n        <h1 className=\"app__title\">Mi lista de pokemon</h1>\n        <PokeList pokemon={pokemon} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}